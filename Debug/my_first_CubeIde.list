
my_first_CubeIde.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001148  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012d0  080012d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012d0  080012d0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080012d0  080012d0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012d0  080012d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012d0  080012d0  000112d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012d4  080012d4  000112d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080012d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003502  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e62  00000000  00000000  00023536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003f8  00000000  00000000  00024398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000380  00000000  00000000  00024790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000143db  00000000  00000000  00024b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000332c  00000000  00000000  00038eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006dece  00000000  00000000  0003c217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000aa0e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f04  00000000  00000000  000aa138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080012b8 	.word	0x080012b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080012b8 	.word	0x080012b8

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	3302      	adds	r3, #2
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	0c1b      	lsrs	r3, r3, #16
 8000326:	43db      	mvns	r3, r3
 8000328:	ea02 0103 	and.w	r1, r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	fa93 f3a3 	rbit	r3, r3
 8000338:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	fab3 f383 	clz	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	fa03 f202 	lsl.w	r2, r3, r2
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	430a      	orrs	r2, r1
 8000352:	3302      	adds	r3, #2
 8000354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40010000 	.word	0x40010000

08000368 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa93 f3a3 	rbit	r3, r3
 8000382:	613b      	str	r3, [r7, #16]
  return result;
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	fab3 f383 	clz	r3, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	401a      	ands	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	fa93 f3a3 	rbit	r3, r3
 80003a2:	61bb      	str	r3, [r7, #24]
  return result;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	fab3 f383 	clz	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	601a      	str	r2, [r3, #0]
}
 80003ba:	bf00      	nop
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b089      	sub	sp, #36	; 0x24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	fa93 f3a3 	rbit	r3, r3
 80003e0:	613b      	str	r3, [r7, #16]
  return result;
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	fab3 f383 	clz	r3, r3
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	401a      	ands	r2, r3
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	fa93 f3a3 	rbit	r3, r3
 8000400:	61bb      	str	r3, [r7, #24]
  return result;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	fab3 f383 	clz	r3, r3
 8000408:	b2db      	uxtb	r3, r3
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	6879      	ldr	r1, [r7, #4]
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	431a      	orrs	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	bf00      	nop
 800041a:	3724      	adds	r7, #36	; 0x24
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	; 0x28
 8000444:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000462:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000466:	f7ff ff39 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800046a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800046e:	f7ff ff35 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8000472:	2108      	movs	r1, #8
 8000474:	4824      	ldr	r0, [pc, #144]	; (8000508 <MX_GPIO_Init+0xc8>)
 8000476:	f7ff ffd5 	bl	8000424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 800047a:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800047e:	2000      	movs	r0, #0
 8000480:	f7ff ff44 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 8000484:	2200      	movs	r2, #0
 8000486:	2108      	movs	r1, #8
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f7ff ff9b 	bl	80003c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8000490:	2200      	movs	r2, #0
 8000492:	2108      	movs	r1, #8
 8000494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000498:	f7ff ff66 	bl	8000368 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800049c:	2308      	movs	r3, #8
 800049e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004a4:	2301      	movs	r3, #1
 80004a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80004b0:	2301      	movs	r3, #1
 80004b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fc38 	bl	8000d30 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80004c0:	2308      	movs	r3, #8
 80004c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004c4:	2301      	movs	r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	4619      	mov	r1, r3
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <MX_GPIO_Init+0xc8>)
 80004da:	f000 fe21 	bl	8001120 <LL_GPIO_Init>
  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80004de:	f7ff fe73 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fec3 	bl	8000274 <NVIC_EncodePriority>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4619      	mov	r1, r3
 80004f2:	2009      	movs	r0, #9
 80004f4:	f7ff fe94 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80004f8:	2009      	movs	r0, #9
 80004fa:	f7ff fe73 	bl	80001e4 <__NVIC_EnableIRQ>
}
 80004fe:	bf00      	nop
 8000500:	3728      	adds	r7, #40	; 0x28
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	48000400 	.word	0x48000400

0800050c <__NVIC_SetPriorityGrouping>:
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <__NVIC_SetPriorityGrouping+0x44>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000528:	4013      	ands	r3, r2
 800052a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800053e:	4a04      	ldr	r2, [pc, #16]	; (8000550 <__NVIC_SetPriorityGrouping+0x44>)
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	60d3      	str	r3, [r2, #12]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <__NVIC_GetPriorityGrouping>:
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <__NVIC_GetPriorityGrouping+0x18>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	f003 0307 	and.w	r3, r3, #7
}
 8000562:	4618      	mov	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <__NVIC_SetPriority>:
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	db0a      	blt.n	800059a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	b2da      	uxtb	r2, r3
 8000588:	490c      	ldr	r1, [pc, #48]	; (80005bc <__NVIC_SetPriority+0x4c>)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	0112      	lsls	r2, r2, #4
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	440b      	add	r3, r1
 8000594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000598:	e00a      	b.n	80005b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4908      	ldr	r1, [pc, #32]	; (80005c0 <__NVIC_SetPriority+0x50>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f003 030f 	and.w	r3, r3, #15
 80005a6:	3b04      	subs	r3, #4
 80005a8:	0112      	lsls	r2, r2, #4
 80005aa:	b2d2      	uxtb	r2, r2
 80005ac:	440b      	add	r3, r1
 80005ae:	761a      	strb	r2, [r3, #24]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000e100 	.word	0xe000e100
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <NVIC_EncodePriority>:
{
 80005c4:	b480      	push	{r7}
 80005c6:	b089      	sub	sp, #36	; 0x24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	f1c3 0307 	rsb	r3, r3, #7
 80005de:	2b04      	cmp	r3, #4
 80005e0:	bf28      	it	cs
 80005e2:	2304      	movcs	r3, #4
 80005e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3304      	adds	r3, #4
 80005ea:	2b06      	cmp	r3, #6
 80005ec:	d902      	bls.n	80005f4 <NVIC_EncodePriority+0x30>
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	3b03      	subs	r3, #3
 80005f2:	e000      	b.n	80005f6 <NVIC_EncodePriority+0x32>
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	43da      	mvns	r2, r3
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	401a      	ands	r2, r3
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800060c:	f04f 31ff 	mov.w	r1, #4294967295
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	43d9      	mvns	r1, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061c:	4313      	orrs	r3, r2
}
 800061e:	4618      	mov	r0, r3
 8000620:	3724      	adds	r7, #36	; 0x24
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <LL_RCC_HSI_Enable+0x1c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <LL_RCC_HSI_Enable+0x1c>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <LL_RCC_HSI_IsReady+0x20>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f003 0302 	and.w	r3, r3, #2
 8000658:	2b02      	cmp	r3, #2
 800065a:	bf0c      	ite	eq
 800065c:	2301      	moveq	r3, #1
 800065e:	2300      	movne	r3, #0
 8000660:	b2db      	uxtb	r3, r3
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000

08000670 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	4904      	ldr	r1, [pc, #16]	; (8000698 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000686:	4313      	orrs	r3, r2
 8000688:	600b      	str	r3, [r1, #0]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <LL_RCC_SetSysClkSource+0x24>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f023 0203 	bic.w	r2, r3, #3
 80006ac:	4904      	ldr	r1, [pc, #16]	; (80006c0 <LL_RCC_SetSysClkSource+0x24>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	604b      	str	r3, [r1, #4]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	40021000 	.word	0x40021000

080006c4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <LL_RCC_GetSysClkSource+0x18>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f003 030c 	and.w	r3, r3, #12
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <LL_RCC_SetAHBPrescaler+0x24>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006f0:	4904      	ldr	r1, [pc, #16]	; (8000704 <LL_RCC_SetAHBPrescaler+0x24>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	604b      	str	r3, [r1, #4]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000

08000708 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000718:	4904      	ldr	r1, [pc, #16]	; (800072c <LL_RCC_SetAPB1Prescaler+0x24>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	604b      	str	r3, [r1, #4]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40021000 	.word	0x40021000

08000730 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <LL_RCC_SetAPB2Prescaler+0x24>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000740:	4904      	ldr	r1, [pc, #16]	; (8000754 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4313      	orrs	r3, r2
 8000746:	604b      	str	r3, [r1, #4]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000

08000758 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000762:	69da      	ldr	r2, [r3, #28]
 8000764:	4907      	ldr	r1, [pc, #28]	; (8000784 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4313      	orrs	r3, r2
 800076a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <LL_APB1_GRP1_EnableClock+0x2c>)
 800076e:	69da      	ldr	r2, [r3, #28]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4013      	ands	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000

08000788 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000792:	699a      	ldr	r2, [r3, #24]
 8000794:	4907      	ldr	r1, [pc, #28]	; (80007b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800079e:	699a      	ldr	r2, [r3, #24]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4013      	ands	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <LL_FLASH_SetLatency+0x24>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f023 0207 	bic.w	r2, r3, #7
 80007c8:	4904      	ldr	r1, [pc, #16]	; (80007dc <LL_FLASH_SetLatency+0x24>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	600b      	str	r3, [r1, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40022000 	.word	0x40022000

080007e0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <LL_FLASH_GetLatency+0x18>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f003 0307 	and.w	r3, r3, #7
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40022000 	.word	0x40022000

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff ffc1 	bl	8000788 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000806:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800080a:	f7ff ffa5 	bl	8000758 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff fe7c 	bl	800050c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000814:	f7ff fe9e 	bl	8000554 <__NVIC_GetPriorityGrouping>
 8000818:	4603      	mov	r3, r0
 800081a:	2200      	movs	r2, #0
 800081c:	210f      	movs	r1, #15
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fed0 	bl	80005c4 <NVIC_EncodePriority>
 8000824:	4603      	mov	r3, r0
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff fea0 	bl	8000570 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f844 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f7ff fe04 	bl	8000440 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  key_state=0;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <main+0xac>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
  record=0;
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <main+0xb0>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
  flag=0;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <main+0xb4>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	switch( key_state)
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <main+0xac>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d010      	beq.n	8000874 <main+0x78>
 8000852:	2b02      	cmp	r3, #2
 8000854:	dc11      	bgt.n	800087a <main+0x7e>
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00e      	beq.n	8000878 <main+0x7c>
 800085a:	2b01      	cmp	r3, #1
 800085c:	d10d      	bne.n	800087a <main+0x7e>
	{
	case NONE:break;//无边沿
	case RISE: flag=!flag;break;//上升沿
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <main+0xb4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf0c      	ite	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	2300      	movne	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <main+0xb4>)
 8000870:	701a      	strb	r2, [r3, #0]
 8000872:	e002      	b.n	800087a <main+0x7e>
	case FALL:break;//下降沿
 8000874:	bf00      	nop
 8000876:	e000      	b.n	800087a <main+0x7e>
	case NONE:break;//无边沿
 8000878:	bf00      	nop
	}
	if(flag==0)
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <main+0xb4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d106      	bne.n	8000890 <main+0x94>
	{
		LED_ON;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <main+0xb8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <main+0xb8>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6013      	str	r3, [r2, #0]
 800088e:	e7dc      	b.n	800084a <main+0x4e>
	}
	else if(flag==1)
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <main+0xb4>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d1d8      	bne.n	800084a <main+0x4e>
	{
		LED_OFF;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <main+0xbc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <main+0xbc>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6013      	str	r3, [r2, #0]
	switch( key_state)
 80008a4:	e7d1      	b.n	800084a <main+0x4e>
 80008a6:	bf00      	nop
 80008a8:	20000023 	.word	0x20000023
 80008ac:	20000022 	.word	0x20000022
 80008b0:	20000021 	.word	0x20000021
 80008b4:	48000418 	.word	0x48000418
 80008b8:	48000428 	.word	0x48000428

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ff79 	bl	80007b8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80008c6:	bf00      	nop
 80008c8:	f7ff ff8a 	bl	80007e0 <LL_FLASH_GetLatency>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1fa      	bne.n	80008c8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80008d2:	f7ff feab 	bl	800062c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80008d6:	bf00      	nop
 80008d8:	f7ff feb8 	bl	800064c <LL_RCC_HSI_IsReady>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d1fa      	bne.n	80008d8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80008e2:	2010      	movs	r0, #16
 80008e4:	f7ff fec4 	bl	8000670 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fef9 	bl	80006e0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff ff0a 	bl	8000708 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff1b 	bl	8000730 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff fece 	bl	800069c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000900:	bf00      	nop
 8000902:	f7ff fedf 	bl	80006c4 <LL_RCC_GetSysClkSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1fa      	bne.n	8000902 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <SystemClock_Config+0x60>)
 800090e:	f000 fc91 	bl	8001234 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000912:	4802      	ldr	r0, [pc, #8]	; (800091c <SystemClock_Config+0x60>)
 8000914:	f000 fc9c 	bl	8001250 <LL_SetSystemCoreClock>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	007a1200 	.word	0x007a1200

08000920 <edgeDetect>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
EDGE_TYPE edgeDetect(uint8_t pin_state, uint8_t samples)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	460a      	mov	r2, r1
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	4613      	mov	r3, r2
 800092e:	71bb      	strb	r3, [r7, #6]

  if(pin_state==1)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d106      	bne.n	8000944 <edgeDetect+0x24>
  {
   record++;
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <edgeDetect+0x4c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <edgeDetect+0x4c>)
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	e002      	b.n	800094a <edgeDetect+0x2a>
  }
  else
  {
	  record=0;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <edgeDetect+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
  }
  if(samples==record)
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <edgeDetect+0x4c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	79ba      	ldrb	r2, [r7, #6]
 8000950:	429a      	cmp	r2, r3
 8000952:	d104      	bne.n	800095e <edgeDetect+0x3e>
  {
	  record=0;
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <edgeDetect+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
	  return 1;
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <edgeDetect+0x40>
  }
  else
  {
	  return 0;
 800095e:	2300      	movs	r3, #0
  }

}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	20000022 	.word	0x20000022

08000970 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4013      	ands	r3, r2
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	bf0c      	ite	eq
 8000986:	2301      	moveq	r3, #1
 8000988:	2300      	movne	r3, #0
 800098a:	b2db      	uxtb	r3, r3
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40010400 	.word	0x40010400

0800099c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6153      	str	r3, [r2, #20]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40010400 	.word	0x40010400

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)//interrupt Handers
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	//LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_3);
	  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8000a18:	2008      	movs	r0, #8
 8000a1a:	f7ff ffa9 	bl	8000970 <LL_EXTI_IsActiveFlag_0_31>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d013      	beq.n	8000a4c <EXTI3_IRQHandler+0x38>
	  {
	  key_state=edgeDetect(!(*((volatile uint32_t *)((uint32_t)(0x48000400 + 0x10U))) & (1 << 3)),5);
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <EXTI3_IRQHandler+0x3c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	bf0c      	ite	eq
 8000a30:	2301      	moveq	r3, #1
 8000a32:	2300      	movne	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2105      	movs	r1, #5
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff71 	bl	8000920 <edgeDetect>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <EXTI3_IRQHandler+0x40>)
 8000a44:	701a      	strb	r2, [r3, #0]
	  LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8000a46:	2008      	movs	r0, #8
 8000a48:	f7ff ffa8 	bl	800099c <LL_EXTI_ClearFlag_0_31>
	  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	48000410 	.word	0x48000410
 8000a54:	20000023 	.word	0x20000023

08000a58 <SystemInit>:
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopForever+0x2>
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopForever+0x6>)
 8000a82:	490e      	ldr	r1, [pc, #56]	; (8000abc <LoopForever+0xa>)
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <LoopForever+0xe>)
 8000a86:	2300      	movs	r3, #0
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:
 8000a8a:	58d4      	ldr	r4, [r2, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:
 8000a90:	18c4      	adds	r4, r0, r3
 8000a92:	428c      	cmp	r4, r1
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <LoopForever+0x12>)
 8000a98:	4c0b      	ldr	r4, [pc, #44]	; (8000ac8 <LoopForever+0x16>)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:
 8000aa2:	42a2      	cmp	r2, r4
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>
 8000aa6:	f7ff ffd7 	bl	8000a58 <SystemInit>
 8000aaa:	f000 fbe1 	bl	8001270 <__libc_init_array>
 8000aae:	f7ff fea5 	bl	80007fc <main>

08000ab2 <LoopForever>:
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
 8000ab4:	20003000 	.word	0x20003000
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000004 	.word	0x20000004
 8000ac0:	080012d8 	.word	0x080012d8
 8000ac4:	20000004 	.word	0x20000004
 8000ac8:	20000024 	.word	0x20000024

08000acc <ADC1_2_IRQHandler>:
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>
	...

08000ad0 <LL_EXTI_EnableIT_0_31>:
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4904      	ldr	r1, [pc, #16]	; (8000af0 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	600b      	str	r3, [r1, #0]
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40010400 	.word	0x40010400

08000af4 <LL_EXTI_EnableIT_32_63>:
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <LL_EXTI_EnableIT_32_63+0x20>)
 8000afe:	6a1a      	ldr	r2, [r3, #32]
 8000b00:	4904      	ldr	r1, [pc, #16]	; (8000b14 <LL_EXTI_EnableIT_32_63+0x20>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	620b      	str	r3, [r1, #32]
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40010400 	.word	0x40010400

08000b18 <LL_EXTI_DisableIT_0_31>:
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <LL_EXTI_DisableIT_0_31+0x24>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	4904      	ldr	r1, [pc, #16]	; (8000b3c <LL_EXTI_DisableIT_0_31+0x24>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	600b      	str	r3, [r1, #0]
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40010400 	.word	0x40010400

08000b40 <LL_EXTI_DisableIT_32_63>:
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <LL_EXTI_DisableIT_32_63+0x24>)
 8000b4a:	6a1a      	ldr	r2, [r3, #32]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4904      	ldr	r1, [pc, #16]	; (8000b64 <LL_EXTI_DisableIT_32_63+0x24>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	620b      	str	r3, [r1, #32]
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40010400 	.word	0x40010400

08000b68 <LL_EXTI_EnableEvent_0_31>:
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	4904      	ldr	r1, [pc, #16]	; (8000b88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40010400 	.word	0x40010400

08000b8c <LL_EXTI_EnableEvent_32_63>:
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b98:	4904      	ldr	r1, [pc, #16]	; (8000bac <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	624b      	str	r3, [r1, #36]	; 0x24
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40010400 	.word	0x40010400

08000bb0 <LL_EXTI_DisableEvent_0_31>:
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	4904      	ldr	r1, [pc, #16]	; (8000bd4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	604b      	str	r3, [r1, #4]
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40010400 	.word	0x40010400

08000bd8 <LL_EXTI_DisableEvent_32_63>:
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <LL_EXTI_DisableEvent_32_63+0x24>)
 8000be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	43db      	mvns	r3, r3
 8000be8:	4904      	ldr	r1, [pc, #16]	; (8000bfc <LL_EXTI_DisableEvent_32_63+0x24>)
 8000bea:	4013      	ands	r3, r2
 8000bec:	624b      	str	r3, [r1, #36]	; 0x24
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40010400 	.word	0x40010400

08000c00 <LL_EXTI_EnableRisingTrig_0_31>:
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	4904      	ldr	r1, [pc, #16]	; (8000c20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	608b      	str	r3, [r1, #8]
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40010400 	.word	0x40010400

08000c24 <LL_EXTI_EnableRisingTrig_32_63>:
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c30:	4904      	ldr	r1, [pc, #16]	; (8000c44 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	628b      	str	r3, [r1, #40]	; 0x28
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	40010400 	.word	0x40010400

08000c48 <LL_EXTI_DisableRisingTrig_0_31>:
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	4904      	ldr	r1, [pc, #16]	; (8000c6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	608b      	str	r3, [r1, #8]
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40010400 	.word	0x40010400

08000c70 <LL_EXTI_DisableRisingTrig_32_63>:
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	4904      	ldr	r1, [pc, #16]	; (8000c94 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	628b      	str	r3, [r1, #40]	; 0x28
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40010400 	.word	0x40010400

08000c98 <LL_EXTI_EnableFallingTrig_0_31>:
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	4904      	ldr	r1, [pc, #16]	; (8000cb8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60cb      	str	r3, [r1, #12]
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40010400 	.word	0x40010400

08000cbc <LL_EXTI_EnableFallingTrig_32_63>:
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc8:	4904      	ldr	r1, [pc, #16]	; (8000cdc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	62cb      	str	r3, [r1, #44]	; 0x2c
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <LL_EXTI_DisableFallingTrig_0_31>:
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4904      	ldr	r1, [pc, #16]	; (8000d04 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60cb      	str	r3, [r1, #12]
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40010400 	.word	0x40010400

08000d08 <LL_EXTI_DisableFallingTrig_32_63>:
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	4904      	ldr	r1, [pc, #16]	; (8000d2c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40010400 	.word	0x40010400

08000d30 <LL_EXTI_Init>:
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7a1b      	ldrb	r3, [r3, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 80cd 	beq.w	8000ee0 <LL_EXTI_Init+0x1b0>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d061      	beq.n	8000e12 <LL_EXTI_Init+0xe2>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7a5b      	ldrb	r3, [r3, #9]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d01c      	beq.n	8000d90 <LL_EXTI_Init+0x60>
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	dc25      	bgt.n	8000da6 <LL_EXTI_Init+0x76>
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d002      	beq.n	8000d64 <LL_EXTI_Init+0x34>
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d00b      	beq.n	8000d7a <LL_EXTI_Init+0x4a>
 8000d62:	e020      	b.n	8000da6 <LL_EXTI_Init+0x76>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff21 	bl	8000bb0 <LL_EXTI_DisableEvent_0_31>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff feac 	bl	8000ad0 <LL_EXTI_EnableIT_0_31>
 8000d78:	e018      	b.n	8000dac <LL_EXTI_Init+0x7c>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff feca 	bl	8000b18 <LL_EXTI_DisableIT_0_31>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff feed 	bl	8000b68 <LL_EXTI_EnableEvent_0_31>
 8000d8e:	e00d      	b.n	8000dac <LL_EXTI_Init+0x7c>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe9b 	bl	8000ad0 <LL_EXTI_EnableIT_0_31>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fee2 	bl	8000b68 <LL_EXTI_EnableEvent_0_31>
 8000da4:	e002      	b.n	8000dac <LL_EXTI_Init+0x7c>
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	bf00      	nop
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7a9b      	ldrb	r3, [r3, #10]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d02e      	beq.n	8000e12 <LL_EXTI_Init+0xe2>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7a9b      	ldrb	r3, [r3, #10]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d01c      	beq.n	8000df6 <LL_EXTI_Init+0xc6>
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	dc25      	bgt.n	8000e0c <LL_EXTI_Init+0xdc>
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d002      	beq.n	8000dca <LL_EXTI_Init+0x9a>
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00b      	beq.n	8000de0 <LL_EXTI_Init+0xb0>
 8000dc8:	e020      	b.n	8000e0c <LL_EXTI_Init+0xdc>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff86 	bl	8000ce0 <LL_EXTI_DisableFallingTrig_0_31>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff11 	bl	8000c00 <LL_EXTI_EnableRisingTrig_0_31>
 8000dde:	e019      	b.n	8000e14 <LL_EXTI_Init+0xe4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff2f 	bl	8000c48 <LL_EXTI_DisableRisingTrig_0_31>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff52 	bl	8000c98 <LL_EXTI_EnableFallingTrig_0_31>
 8000df4:	e00e      	b.n	8000e14 <LL_EXTI_Init+0xe4>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff00 	bl	8000c00 <LL_EXTI_EnableRisingTrig_0_31>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff47 	bl	8000c98 <LL_EXTI_EnableFallingTrig_0_31>
 8000e0a:	e003      	b.n	8000e14 <LL_EXTI_Init+0xe4>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e000      	b.n	8000e14 <LL_EXTI_Init+0xe4>
 8000e12:	bf00      	nop
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d076      	beq.n	8000f0a <LL_EXTI_Init+0x1da>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7a5b      	ldrb	r3, [r3, #9]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d01c      	beq.n	8000e5e <LL_EXTI_Init+0x12e>
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	dc25      	bgt.n	8000e74 <LL_EXTI_Init+0x144>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <LL_EXTI_Init+0x102>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d00b      	beq.n	8000e48 <LL_EXTI_Init+0x118>
 8000e30:	e020      	b.n	8000e74 <LL_EXTI_Init+0x144>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fece 	bl	8000bd8 <LL_EXTI_DisableEvent_32_63>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe57 	bl	8000af4 <LL_EXTI_EnableIT_32_63>
 8000e46:	e018      	b.n	8000e7a <LL_EXTI_Init+0x14a>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe77 	bl	8000b40 <LL_EXTI_DisableIT_32_63>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fe98 	bl	8000b8c <LL_EXTI_EnableEvent_32_63>
 8000e5c:	e00d      	b.n	8000e7a <LL_EXTI_Init+0x14a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe46 	bl	8000af4 <LL_EXTI_EnableIT_32_63>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fe8d 	bl	8000b8c <LL_EXTI_EnableEvent_32_63>
 8000e72:	e002      	b.n	8000e7a <LL_EXTI_Init+0x14a>
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	bf00      	nop
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7a9b      	ldrb	r3, [r3, #10]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d043      	beq.n	8000f0a <LL_EXTI_Init+0x1da>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a9b      	ldrb	r3, [r3, #10]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d01c      	beq.n	8000ec4 <LL_EXTI_Init+0x194>
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	dc25      	bgt.n	8000eda <LL_EXTI_Init+0x1aa>
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d002      	beq.n	8000e98 <LL_EXTI_Init+0x168>
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d00b      	beq.n	8000eae <LL_EXTI_Init+0x17e>
 8000e96:	e020      	b.n	8000eda <LL_EXTI_Init+0x1aa>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff33 	bl	8000d08 <LL_EXTI_DisableFallingTrig_32_63>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff febc 	bl	8000c24 <LL_EXTI_EnableRisingTrig_32_63>
 8000eac:	e02e      	b.n	8000f0c <LL_EXTI_Init+0x1dc>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fedc 	bl	8000c70 <LL_EXTI_DisableRisingTrig_32_63>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fefd 	bl	8000cbc <LL_EXTI_EnableFallingTrig_32_63>
 8000ec2:	e023      	b.n	8000f0c <LL_EXTI_Init+0x1dc>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff feab 	bl	8000c24 <LL_EXTI_EnableRisingTrig_32_63>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fef2 	bl	8000cbc <LL_EXTI_EnableFallingTrig_32_63>
 8000ed8:	e018      	b.n	8000f0c <LL_EXTI_Init+0x1dc>
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e015      	b.n	8000f0c <LL_EXTI_Init+0x1dc>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe17 	bl	8000b18 <LL_EXTI_DisableIT_0_31>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fe5e 	bl	8000bb0 <LL_EXTI_DisableEvent_0_31>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe21 	bl	8000b40 <LL_EXTI_DisableIT_32_63>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe68 	bl	8000bd8 <LL_EXTI_DisableEvent_32_63>
 8000f08:	e000      	b.n	8000f0c <LL_EXTI_Init+0x1dc>
 8000f0a:	bf00      	nop
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <LL_GPIO_SetPinMode>:
 8000f16:	b480      	push	{r7}
 8000f18:	b089      	sub	sp, #36	; 0x24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa93 f3a3 	rbit	r3, r3
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fab3 f383 	clz	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	401a      	ands	r2, r3
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa93 f3a3 	rbit	r3, r3
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	fab3 f383 	clz	r3, r3
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	431a      	orrs	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	bf00      	nop
 8000f6a:	3724      	adds	r7, #36	; 0x24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_GPIO_SetPinOutputType>:
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	401a      	ands	r2, r3
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	fb01 f303 	mul.w	r3, r1, r3
 8000f92:	431a      	orrs	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_GPIO_SetPinSpeed>:
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa93 f3a3 	rbit	r3, r3
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	fab3 f383 	clz	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2103      	movs	r1, #3
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fab3 f383 	clz	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	bf00      	nop
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_GPIO_SetPinPull>:
 8001002:	b480      	push	{r7}
 8001004:	b089      	sub	sp, #36	; 0x24
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	fab3 f383 	clz	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2103      	movs	r1, #3
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	401a      	ands	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	fab3 f383 	clz	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	431a      	orrs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	bf00      	nop
 8001056:	3724      	adds	r7, #36	; 0x24
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_GPIO_SetAFPin_0_7>:
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6a1a      	ldr	r2, [r3, #32]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	210f      	movs	r1, #15
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	401a      	ands	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	fa93 f3a3 	rbit	r3, r3
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	621a      	str	r2, [r3, #32]
 80010b2:	bf00      	nop
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_GPIO_SetAFPin_8_15>:
 80010be:	b480      	push	{r7}
 80010c0:	b089      	sub	sp, #36	; 0x24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	210f      	movs	r1, #15
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	fab3 f383 	clz	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	431a      	orrs	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
 8001114:	bf00      	nop
 8001116:	3724      	adds	r7, #36	; 0x24
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_GPIO_Init>:
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e051      	b.n	80011e8 <LL_GPIO_Init+0xc8>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2101      	movs	r1, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d043      	beq.n	80011e2 <LL_GPIO_Init+0xc2>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d003      	beq.n	800116a <LL_GPIO_Init+0x4a>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d10e      	bne.n	8001188 <LL_GPIO_Init+0x68>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	461a      	mov	r2, r3
 8001170:	69b9      	ldr	r1, [r7, #24]
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff16 	bl	8000fa4 <LL_GPIO_SetPinSpeed>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6819      	ldr	r1, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	461a      	mov	r2, r3
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fef6 	bl	8000f74 <LL_GPIO_SetPinOutputType>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	461a      	mov	r2, r3
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff36 	bl	8001002 <LL_GPIO_SetPinPull>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d11a      	bne.n	80011d4 <LL_GPIO_Init+0xb4>
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	fab3 f383 	clz	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	d807      	bhi.n	80011c6 <LL_GPIO_Init+0xa6>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	461a      	mov	r2, r3
 80011bc:	69b9      	ldr	r1, [r7, #24]
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff4e 	bl	8001060 <LL_GPIO_SetAFPin_0_7>
 80011c4:	e006      	b.n	80011d4 <LL_GPIO_Init+0xb4>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	461a      	mov	r2, r3
 80011cc:	69b9      	ldr	r1, [r7, #24]
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ff75 	bl	80010be <LL_GPIO_SetAFPin_8_15>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	461a      	mov	r2, r3
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff fe9a 	bl	8000f16 <LL_GPIO_SetPinMode>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	fa22 f303 	lsr.w	r3, r2, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1a6      	bne.n	8001144 <LL_GPIO_Init+0x24>
 80011f6:	2300      	movs	r3, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LL_InitTick>:
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <LL_InitTick+0x30>)
 8001214:	3b01      	subs	r3, #1
 8001216:	6053      	str	r3, [r2, #4]
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <LL_InitTick+0x30>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <LL_InitTick+0x30>)
 8001220:	2205      	movs	r2, #5
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e010 	.word	0xe000e010

08001234 <LL_Init1msTick>:
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffdd 	bl	8001200 <LL_InitTick>
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <LL_SetSystemCoreClock>:
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <LL_SetSystemCoreClock+0x1c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000

08001270 <__libc_init_array>:
 8001270:	b570      	push	{r4, r5, r6, lr}
 8001272:	4d0d      	ldr	r5, [pc, #52]	; (80012a8 <__libc_init_array+0x38>)
 8001274:	4c0d      	ldr	r4, [pc, #52]	; (80012ac <__libc_init_array+0x3c>)
 8001276:	1b64      	subs	r4, r4, r5
 8001278:	10a4      	asrs	r4, r4, #2
 800127a:	2600      	movs	r6, #0
 800127c:	42a6      	cmp	r6, r4
 800127e:	d109      	bne.n	8001294 <__libc_init_array+0x24>
 8001280:	4d0b      	ldr	r5, [pc, #44]	; (80012b0 <__libc_init_array+0x40>)
 8001282:	4c0c      	ldr	r4, [pc, #48]	; (80012b4 <__libc_init_array+0x44>)
 8001284:	f000 f818 	bl	80012b8 <_init>
 8001288:	1b64      	subs	r4, r4, r5
 800128a:	10a4      	asrs	r4, r4, #2
 800128c:	2600      	movs	r6, #0
 800128e:	42a6      	cmp	r6, r4
 8001290:	d105      	bne.n	800129e <__libc_init_array+0x2e>
 8001292:	bd70      	pop	{r4, r5, r6, pc}
 8001294:	f855 3b04 	ldr.w	r3, [r5], #4
 8001298:	4798      	blx	r3
 800129a:	3601      	adds	r6, #1
 800129c:	e7ee      	b.n	800127c <__libc_init_array+0xc>
 800129e:	f855 3b04 	ldr.w	r3, [r5], #4
 80012a2:	4798      	blx	r3
 80012a4:	3601      	adds	r6, #1
 80012a6:	e7f2      	b.n	800128e <__libc_init_array+0x1e>
 80012a8:	080012d0 	.word	0x080012d0
 80012ac:	080012d0 	.word	0x080012d0
 80012b0:	080012d0 	.word	0x080012d0
 80012b4:	080012d4 	.word	0x080012d4

080012b8 <_init>:
 80012b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ba:	bf00      	nop
 80012bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012be:	bc08      	pop	{r3}
 80012c0:	469e      	mov	lr, r3
 80012c2:	4770      	bx	lr

080012c4 <_fini>:
 80012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c6:	bf00      	nop
 80012c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ca:	bc08      	pop	{r3}
 80012cc:	469e      	mov	lr, r3
 80012ce:	4770      	bx	lr
